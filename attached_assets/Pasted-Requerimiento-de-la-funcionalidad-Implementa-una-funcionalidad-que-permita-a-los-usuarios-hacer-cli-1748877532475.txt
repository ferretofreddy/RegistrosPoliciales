Requerimiento de la funcionalidad: Implementa una funcionalidad que permita a los usuarios hacer clic en cualquier ítem relacionado (Persona, Vehículo, Inmueble o Ubicación) en el apartado "Relaciones" y realice una nueva búsqueda automática basada en el registro seleccionado, mostrando los resultados en la misma página "Consultas" con sus apartados "Información Detallada", "Observaciones" y "Relaciones". La funcionalidad debe integrarse sin afectar otros módulos o páginas de la aplicación y debe incluir pruebas exhaustivas para garantizar su correcto funcionamiento.Instrucciones para el desarrollo:Backend (Node.js):Crea o modifica una ruta en el servidor (por ejemplo, /consultas/buscar) que reciba el identificador del ítem seleccionado y su tipo de entidad (Persona, Vehículo, Inmueble o Ubicación) como parámetros.Diseña consultas a la base de datos PostgreSQL que recuperen los datos del registro seleccionado y sus relaciones, asegurando que sean seguras (usando consultas parametrizadas) y optimizadas.Implementa manejo de errores para casos como ítems inexistentes, retornando mensajes claros al frontend.Asegúrate de que la lógica del backend sea modular y no interfiera con otras rutas o módulos existentes de la aplicación.Valida los parámetros de entrada para evitar errores o accesos no autorizados.Frontend (Interfaz Web):En el apartado "Relaciones", configura cada ítem relacionado como un elemento interactivo (por ejemplo, un enlace o botón) que incluya el identificador y el tipo de entidad del registro.Implementa una solicitud asíncrona (usando Fetch o AJAX) al hacer clic en un ítem, enviando el identificador y el tipo de entidad al backend.Actualiza dinámicamente la página "Consultas" con los nuevos datos recibidos, reemplazando los apartados "Información Detallada", "Observaciones" y "Relaciones" sin recargar la página completa.Muestra un indicador de carga durante la solicitud para mejorar la experiencia del usuario.Implementa un mensaje de error claro si la búsqueda no devuelve resultados.Asegúrate de que el diseño sea responsive y consistente con el estilo de la página "Consultas" actual.Verifica que los eventos de clic no interfieran con otras interacciones de la interfaz (por ejemplo, botones o formularios en otras secciones).Base de datos (PostgreSQL en Neon):Diseña consultas que, dado un identificador y tipo de entidad, recuperen los datos del registro y sus relaciones con otras entidades.Asegúrate de que las consultas sean eficientes, utilizando índices en las columnas clave para búsquedas y relaciones.Verifica que las tablas de Personas, Vehículos, Inmuebles y Ubicaciones estén correctamente estructuradas para soportar las relaciones, utilizando tablas intermedias si es necesario.Mantén la integridad de los datos y evita modificaciones accidentales en otras partes de la base de datos.Pruebas exhaustivas:Pruebas unitarias (Backend):Prueba la ruta /consultas/buscar con diferentes combinaciones de identificadores y tipos de entidad válidos.Prueba casos límite, como identificadores inexistentes, tipos de entidad no válidos o parámetros faltantes.Verifica que las consultas SQL sean seguras y no permitan inyecciones SQL.Confirma que la ruta no afecta otras rutas o módulos del backend.Pruebas unitarias (Frontend):Prueba los eventos de clic en ítems relacionados para cada tipo de entidad (Persona, Vehículo, Inmueble, Ubicación).Valida que las solicitudes asíncronas se envíen correctamente y manejen respuestas exitosas y de error.Confirma que la interfaz se actualiza correctamente sin recargar la página.Verifica que no haya conflictos con otros elementos interactivos de la página.Pruebas de integración:Prueba el flujo completo: desde el clic en un ítem relacionado, la solicitud al backend, la respuesta y la actualización de la interfaz.Valida que los datos mostrados (Información Detallada, Observaciones, Relaciones) sean correctos para el registro seleccionado.Asegúrate de que la funcionalidad no afecta otras páginas o módulos (por ejemplo, otras rutas o formularios de la aplicación).Pruebas de usabilidad (Interfaz Web):Verifica que la funcionalidad sea intuitiva y que los ítems relacionados sean fácilmente identificables como clicables.Prueba en dispositivos móviles y de escritorio para garantizar que la interfaz sea responsive.Confirma que el indicador de carga y los mensajes de error sean claros y visibles.Pruebas de regresión:Ejecuta pruebas en otras páginas y módulos de la aplicación para garantizar que la nueva funcionalidad no introduce errores o afecta el rendimiento.Verifica que las funcionalidades existentes en la página "Consultas" (como la búsqueda inicial) sigan funcionando correctamente.Consideraciones para no afectar otros módulos:Asegúrate de que el código sea modular y encapsulado, evitando modificar controladores, rutas o componentes compartidos que puedan afectar otras partes de la aplicación.Usa nombres específicos para funciones, rutas y clases CSS para evitar conflictos con otros módulos.Valida que los cambios en el frontend no alteren el diseño o comportamiento de otras páginas o secciones.Mantén la base de datos sin modificaciones estructurales innecesarias, utilizando solo las consultas necesarias para la nueva funcionalidad.Interfaz de usuario:Los ítems relacionados deben ser visualmente distinguibles como interactivos (por ejemplo, con un estilo de enlace, cursor de puntero o botón).Mantén la consistencia visual con el diseño actual de la página "Consultas".Implementa un indicador de carga (como un spinner) durante la búsqueda.Muestra mensajes claros para errores (por ejemplo, "No se encontraron datos para este registro").Opcionalmente, considera agregar una funcionalidad de "atrás" para volver al registro anterior, asegurándote de que no interfiera con otros módulos.Entregable esperado:Instrucciones claras para integrar la funcionalidad en la aplicación existente en Replit, asegurando compatibilidad con Node.js y PostgreSQL en Neon.Un plan de pruebas detallado que cubra pruebas unitarias, de integración, de usabilidad y de regresión, con instrucciones para ejecutarlas.Documentación sobre cómo la funcionalidad evita afectar otros módulos o páginas, incluyendo una lista de verificaciones realizadas.Restricciones:La funcionalidad debe integrarse sin recargar la página completa, usando actualizaciones dinámicas del DOM.No modifiques la estructura de la base de datos a menos que sea estrictamente necesario, y en ese caso, documenta los cambios.Asegúrate de que la funcionalidad no rompa ni ralentice otras partes de la aplicación.Realiza todas las pruebas necesarias para garantizar que la funcionalidad sea robusta y no afecte la estabilidad de la aplicación.