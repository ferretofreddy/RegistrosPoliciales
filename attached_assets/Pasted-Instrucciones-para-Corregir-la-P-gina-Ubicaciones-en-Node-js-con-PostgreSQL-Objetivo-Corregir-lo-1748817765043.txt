Instrucciones para Corregir la Página "Ubicaciones" en Node.js con PostgreSQL
Objetivo
Corregir los errores en la página "ubicaciones" de una aplicación Node.js con PostgreSQL, asegurando que el mapa y las tablas muestren todas las ubicaciones directas y relacionadas de entidades como personas, vehículos, inmuebles y ubicaciones, respetando las relaciones bidireccionales y verificando las tablas de relaciones en la base de datos.
________________________________________
Contexto
•	La página "ubicaciones" ya está implementada, pero presenta problemas en la visualización de datos.
•	El mapa y las tablas no reflejan con precisión las ubicaciones según la lógica establecida.
•	La aplicación utiliza Node.js con Express y una base de datos PostgreSQL.
________________________________________
Pasos para Diagnosticar y Corregir
1. Revisión de la Lógica de Ubicaciones
•	Ubicaciones Directas:
o	Personas: Domicilios (tipo = 'Domicilio' en ubicaciones), vinculados vía personas_ubicaciones.
o	Inmuebles: Ubicaciones propias (tipo = 'Inmueble' en ubicaciones), vinculadas vía inmuebles_ubicaciones.
o	Vehículos: No tienen ubicaciones directas.
o	Ubicaciones: Sus propios registros en ubicaciones, excluyendo aquellos con tipo = 'Inmueble' o 'Domicilio'.
•	Ubicaciones Relacionadas:
o	Provienen de entidades relacionadas a través de tablas como relaciones, que son bidireccionales.
o	Incluir ubicaciones de entidades relacionadas, como domicilios de personas o ubicaciones de inmuebles, excluyendo tipos no relevantes.
2. Verificación de Tablas de Relaciones en la Base de Datos
•	Identificar Todas las Tablas de Relaciones:
o	Ejecutar una consulta SQL para listar todas las tablas en la base de datos
o	Revisar los nombres de las tablas y filtrar aquellas que conectan entidades, como:
	personas_ubicaciones
	inmuebles_ubicaciones
	personas_inmuebles
	vehiculos_personas
	Otras posibles tablas como personas_personas o vehiculos_ubicaciones.
•	Confirmar Estructura de las Tablas:
o	Para cada tabla identificada, verificar sus columnas de claves foráneas. Ejemplo:
	personas_ubicaciones: Debe tener persona_id y ubicacion_id.
	personas_inmuebles: Debe tener persona_id e inmueble_id.
o	Comprobar la existencia de constraints de claves 
o	Asegurarse de que las claves foráneas apunten correctamente a las tablas de entidades (por ejemplo, personas, inmuebles, ubicaciones).
•	Validar Integridad:
o	Verificar que no haya datos huérfanos 
o	Repetir para cada tabla de relaciones.
•	Mapear Relaciones Complejas:
o	Identificar relaciones muchos-a-muchos o que involucren más de dos entidades (por ejemplo, una tabla personas_inmuebles_ubicaciones).
o	Crear un diagrama de relaciones de entidades (ERD) para visualizar todas las conexiones.
3. Ajuste de Consultas SQL
•	Consultas para Ubicaciones Directas:
o	Filtrar por tipo y usar las tablas de relaciones verificadas
•	Consultas para Ubicaciones Relacionadas:
o	Usar las tablas de relaciones confirmadas y considerar la bidireccionalidad. 
o	Ajustar según las tablas de relaciones identificadas (por ejemplo, incluir personas_inmuebles).
4. Ajuste del Endpoint en el Backend
•	Endpoint Principal:
o	Asegurarse de que GET  use las consultas ajustadas y devuelva ubicaciones directas y relacionadas por separado.
•	Logging:
o	Registrar las consultas ejecutadas para depurar errores.
5. Revisión del Frontend
•	Mapa:
o	Verificar que todas las ubicaciones devueltas se muestren sin omisiones.
•	Tablas:
o	Confirmar que los datos se presenten correctamente, sin duplicados.
•	Reporte en PDF:
o	Validar que el PDF refleje las ubicaciones ajustadas.
6. Pruebas Exhaustivas
•	Datos de Prueba:
o	Crear registros en todas las tablas de relaciones identificadas, incluyendo relaciones bidireccionales.
•	Verificación:
o	Probar la página "ubicaciones" para cada tipo de entidad y validar mapa, tablas y PDF.
•	Depuración:
o	Revisar logs y consola del navegador.
