Limpiar una aplicación Node.js/TypeScript que utiliza una base de datos PostgreSQL administrada por Neon, consolidando archivos duplicados o versionados (por ejemplo, eliminar database_storage_new.ts a favor de un único database_storage.ts), actualizar todas las dependencias, verificar la funcionalidad completa de la aplicación, compilar el código en archivos unificados y reiniciar la base de datos preservando las tablas de usuarios y sesiones, tipos inmuebles, tipo ubicaciones, posición en la estructura y tipo de identificacion, reiniciando sus índices a 1.
Pasos
1. Configuración del Entorno
•	Acción: Asegurar que el entorno de Replit esté configurado para Node.js (versión 16 o superior), TypeScript y PostgreSQL (Neon).
•	Tareas:
o	Verificar que package.json exista y contenga typescript y pg (para PostgreSQL) como dependencias.
	Si falta pg, instalarlo: npm install pg.
o	Comprobar la existencia de tsconfig.json. Si no existe, crear uno con:
o	{
o	  "compilerOptions": {
o	    "target": "es6",
o	    "module": "commonjs",
o	    "strict": true,
o	    "esModuleInterop": true,
o	    "outDir": "./dist",
o	    "rootDir": "./src"
o	  },
o	  "include": ["src/**/*"],
o	  "exclude": ["node_modules"]
}
o	Confirmar la conexión a la base de datos PostgreSQL en Neon:
	Verificar que la variable de entorno DATABASE_URL esté configurada en Replit (en el archivo .replit o en la sección de secretos).
	Probar la conexión ejecutando un script simple, por ejemplo:
	const { Client } = require('pg');
	const client = new Client({ connectionString: process.env.DATABASE_URL });
client.connect().then(() => console.log('Conexión exitosa')).catch(err => console.error('Error de conexión', err)).finally(() => client.end());
	Asegurar que DATABASE_URL incluya ?sslmode=require para conexiones seguras en Neon.
2. Actualización de Dependencias
•	Acción: Actualizar todos los módulos de Node.js y dependencias a sus versiones más recientes compatibles.
•	Tareas:
o	Ejecutar npm install -g npm@latest para actualizar npm.
o	Ejecutar npm update para actualizar todas las dependencias de package.json a sus versiones compatibles más recientes.
o	Verificar dependencias desactualizadas con npm outdated. Para cada paquete desactualizado, ejecutar npm install nombre-paquete@latest si es compatible.
o	Actualizar TypeScript: npm install typescript@latest --save-dev.
o	Actualizar el cliente de PostgreSQL: npm install pg@latest.
o	Verificar compatibilidad ejecutando la aplicación (npm start o equivalente) y revisando errores, especialmente en la conexión a Neon.
o	Si hay errores, revertir actualizaciones incompatibles con npm install nombre-paquete@versión-anterior y documentar el problema.
3. Identificar y Consolidar Archivos Duplicados
•	Acción: Identificar y fusionar archivos versionados o duplicados (por ejemplo, database_storage.ts y database_storage_new.ts) en un único archivo.
•	Tareas:
o	Escanear el directorio del proyecto en busca de archivos con nombres similares (por ejemplo, con sufijos _new, _old, _backup).
	Usar: find . -type f -name "*.ts" | grep -E "_new|_old|_backup".
o	Para cada par (por ejemplo, database_storage.ts y database_storage_new.ts):
	Comparar contenidos con diff o una herramienta de comparación en Replit.
	Identificar la versión más completa o reciente verificando:
	Fecha de última modificación (ls -l).
	Uso en la aplicación (buscar import
